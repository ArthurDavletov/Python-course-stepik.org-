3.2 шаг 5

Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь dd и два числа: keykey и valuevalue.
Если ключ keykey есть в словаре dd, то добавьте значение valuevalue в список, который хранится по этому ключу. 
Если ключа keykey нет в словаре, то нужно добавить значение в список по ключу 2⋅key2⋅key. Если и ключа 2⋅key2⋅key нет, то нужно добавить ключ 2⋅key2⋅key в словарь и сопоставить ему список из переданного элемента [value][value].
Требуется реализовать только эту функцию, кода вне неё не должно быть.
Функция не должна вызывать внутри себя функции input и print.
Пример работы функции:
d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}

Код:
def update_dictionary(d, key, value):
    #d={}
    if key in d:
        d[key]+=[value]
    else:
        if key*2 not in d:
            d[key*2]=[value]
        else:
            d[key*2]+=[value]   

3.2 шаг 6

Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.
Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода). 
Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.

d = {}
string = [str(x).lower() for x in input().split()]
for i in range(len(string)):
    if string[i] in d:
        d[string[i]] += 1
    else:
        d[string[i]] = 1
for key in d:
        print(key, d[key])

3.2 шаг 7

Имеется реализованная функция f(x)f(x), принимающая на вход целое число xx, которая вычисляет некоторое целочисленое значение и возвращает его в качестве результата работы.
Функция вычисляется достаточно долго, ничего не выводит на экран, не пишет в файлы и зависит только от переданного аргумента xx.
Напишите программу, которой на вход в первой строке подаётся число nn — количество значений xx, для которых требуется узнать значение функции f(x)f(x), после чего сами эти nn значений, каждое на отдельной строке. Программа должна после каждого введённого значения аргумента вывести соответствующие значения функции ff на отдельной строке. 
Для ускорения вычисления необходимо сохранять уже вычисленные значения функции при известных аргументах.
Обратите внимание, что в этой задаче установлено достаточно сильное ограничение в две секунды по времени исполнения кода на тесте. 

n=int(input())
d={}
while n!=0:
    x=int(input())
    if x not in d:
        d[x] = f(x)
    print (d[x])
    n-=1
